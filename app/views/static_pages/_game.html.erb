<!-- Game's javascript (place directly for now to reduce compiling time) -->
<!-- < %= javascript_pack_tag 'game' %> -->
<script>
"use strict";

/**
 * requestAnim shim layer by Paul Irish
 * Finds the first API that works to optimize the animation loop,
 * otherwise defaults to setTimeout().
 */
// window.requestAnimFrame = (function(){
//   return  window.requestAnimationFrame   ||
//       window.webkitRequestAnimationFrame ||
//       window.mozRequestAnimationFrame    ||
//       window.oRequestAnimationFrame      ||
//       window.msRequestAnimationFrame     ||
//       function(/* function */ callback, /* DOMElement */ element){
//         window.setTimeout(callback, 1000 / 60);
//       };
// })();

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~LISTENERS~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Resizes game's canvas (A.K.A. 'gameArea') to dynamic page size (i.e. when 
// user changes their browser's size)
window.addEventListener("resize", function(event) {
  canvas = document.getElementById("game-canvas");

  canvas.width  = window.innerWidth;
  canvas.height = window.innerHeight;
});

// Resize canvas from the get-go
window.addEventListener("load", function(event) { 
  canvas = document.getElementById("game-canvas");

  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;
});  

// Player token's controls 
// 'node' = 'window' in this case
window.addEventListener('keydown', function(event) {
  activeKeys[event.keyCode] = true; // Player presses a key, true in array
});

window.addEventListener('keyup', function(event) {
  activeKeys[event.keyCode] = false; // Player stops pressing key, false in array
});  

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~GLOBAL VARIABLES~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Player token's name
var cassie = new playerToken(70, 70, "red");
// Arguments presented as labeled parameters for clarity, the names 
// serve no purpose otherwise
// let inv = new invaders(totalInvaders = 8, {invaderWidth: 60, invaderHeight: 30}, 
//                        gapSpace = 30, velocity = 1, frameRate = 75);
var inv = new invaders(8, {invaderWidth: 60, invaderHeight: 30}, 30, 1, 75);
// Object list of key presses ('keydown'). False for unpressed or missing
var activeKeys = {};
var holding = '';

// Listeners' pertinent keycodes 
const Space      = 32; // i.e. The spacebar 
const ArrowLeft  = 37;
const ArrowUp    = 38;
const ArrowRight = 39;
const ArrowDown  = 40;

//BUG1 Keep track of frontmost player bullet's height
let playerBH = 0;
// let first = true;


// Stacked: Do not re-initialize invaders if already done before 
var invadersMem = false; // STANDBY1: Remove while adding features MEM
// Ensures game only starts every other click (start -> reset & stop -> start)
// var go = true; // ERROR?
var go = true;

// Game canvas reference used throughout many object methods
// Canvas coordinates are as follows:
// (0,0) -- -- -- >(1,0)
//      |
//      |
//      |
//      V(0,1)

// Capture values when page loads
let canvas, ctx; // Set with 'init()' after page is loaded

let startLoop = false; // Starts/stops gameloop

// Keeps record of all shots/bullets
this.shotKeeper = new shotKeeper();

// Used to display frames per second
let timeStamp = 0;
let secondsPassed = 0, oldTimeStamp = 0, fps;
// TODO: Reset timeStamp(?)
let reqId; // Holds the requestId upon calling requestAnimationFrame

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~OBJECTS/FUNCTIONS~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Images
//REP1
// Images for objects that will be used in-game (goal is for images to be loaded once and no need to create new image object each time they're needed)
var imgRepo = new function(nImages = 1) { // Singleton
  // IMAGE DEFINITIONS
  this.player_token = new Image();

  // IMAGE LOADING
  // Don't start game until all images are done loading
  this.nImages = nImages; let nLoaded = 0;
  let imgLoaded = function() {
    if(nLoaded ++ == nImages) {
      // window.init(); // Start game TODO: Create a title screen (and only load
                        // game when all images are loaded)
    }
  }

  this.player_token.onload = function() {
    imgLoaded(); // Increment total loaded images by one
  }
  // SET IMAGE SOURCES
  this.player_token.src = "/assets/token_cassie.svg";
};

// Renderer object
var renderer = (function() {
  function _drawPlayer(context, token) { // render player token
    ctx.drawImage(imgRepo.player_token, token.x, token.y, token.width, token.height);
  }

  function _drawInvader(context, token) { // render invader tokens

  }

  function _render() {
    // TODO: Move the gloval canvas variables here
    // var canvas = document.getElementById("game-canvas");
    // var context = canvas.getContext("2d");

    // var i,
    //     entity,
    //     entities = gameArea.entities(); // get tokens

    //     for(i = 0; i < entities.length; i ++) { // Drawing loop
    //       entity = entities[i];

    //       if(entity instanceof playerToken) {
    //         _drawPlayer(ctx, entity);
    //       }
    //     }

    // Get all game tokens from the game and draw them on the canvas
    gameArea.entities().forEach(function(entity) { // Draw stored game tokens
      if(entity instanceof playerToken) {
        _drawPlayer(ctx, entity);
      }

      else { // Default

      }
    });
  }

  return {
    render: _render // Function accessor
  };

})();

// Contingency, structurally script will already run after page is loaded
window.onload = getCanvas; // onload event to set canvas variables
function getCanvas() {
  canvas = document.getElementById("game-canvas");
  ctx = canvas.getContext("2d");
}

// Function that toggles an HTML element's visibility
const toggle = (elem) => {
  // Adds or removes 'hidden' class to element
  elem.classList.toggle('hidden');
}

// Entirety of game's 'screen', where all the visible game pieces are
var gameArea = (function() { // Singleton
  var _entities = []; // Holds all game tokens

  function _tog() {
    //BUG1
    if (go == true) { // Initiate game    
      go = false;
      startLoop = true;
      toggle(canvas); // Make canvas visible
      // Set demo text to indicate game is starting (for now, just to verify)
      document.getElementById("demo").innerHTML = "Game start";
      // Button text changed to indicate pressing again ends the game
      document.getElementById("play-button").innerHTML = "Stop";
      this.start(); // Set variables to start game
    } //BUG1 
    else { // End game, reset relevant variables
      // TODO: Reset timeStamp(?)
      timeStamp = 0;
      go = true;
      startLoop = false;
      // End game, press button again to "play" the game again (as of now, all
      // progress is lost after the currently existing hard reset)
      toggle(canvas); // Hide canvas
      document.getElementById("demo").innerHTML = "Game stop";
      document.getElementById("play-button").innerHTML = "Play";
      this.reset();
    }
  }

  //cassie = new playerToken(40, 40, red, window.innerWidth/2, window.innerHeight),
  function _start() {
    // PREP
    // Reset important variables
    this.reset();

    // Update canvas
    canvas.width  = window.innerWidth;
    canvas.height = window.innerHeight;

    cassie.setup();

    //RELOCATION
    _entities.push(cassie);


    // Set up initial invader rows (use from stack if previous game played 
    // already)
    inv.setup();
    // Initialize structure that displays bullets (clears array)
    shotKeeper.setup();

    // LOOP
    // Initiate gameLoop, request function gives the browser some air while 
    // looping and time the game loop to be in-sync with the browser repaint
    startLoop = true;
    window.requestAnimationFrame(gameLoop);
  }

  function _clear() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
  }

  function _reset() {
    // All settings and game components are at their starting values
    //this.clear(); // Might not need this here

    // clearInterval(this.interval); // nothing should be moving/responding
    // clearAnimationFrame(this.animationFrame);
    secondsPassed = 0;
    oldTimeStamp  = 0;
    timeStamp     = 0; // TODO: Reset timeStamp(can it be done?)
  }

  return { 
    tog:   _tog, // method accessors
    start: _start,
    clear: _clear,
    reset: _reset,
    entities: function() { return _entities; } // data accessors
  };
})();

function gameLoop(timeStamp) { // TODO: Reset timeStamp(?)
  if(!startLoop) {// Conditional that stops loop 
    return;
  }
  // [ 1 ] UPDATE
  secondsPassed = (timeStamp - oldTimeStamp)/1000;
  secondsPassed = Math.min(0.1, secondsPassed);
  oldTimeStamp = timeStamp;

  // Calculate FPS (for the display)
  fps = Math.round(1/secondsPassed);

  cassie.update(secondsPassed);
  cassie.shoot(); // Update shotkeeper with any bullets player shot
  // TODO: Add secondsPassed for consistency
  //WIP: Gonna edit invaders to move according to time passed
  inv.update();

  inv.shoot();

  shotKeeper.update();

  // [ 2 ] COLLISION DETECTION
  // [Bullet => Check for collision]
  // TODO: Cassie (i.e. player token collision)
  // cassie.intersect(); 
  // [Bullets => iterate invaders]

  // Invader collision check (only first row for now)
  inv.invadarr.a.forEach(function(row, rind){ // row index
    row.forEach(function(invader, cind) { // column index
      shotKeeper.collisionCheck(invader);
      // WIP
      // If a backup invader exists, begins attacking after frontmost dies BULL1
      // if(invader.collision && rind > 0) {
      //   inv.invadarr.f[rind][cind] = inv.invadarr.a[rind - 1][cind];
      // }
    });
  });

  // [ 3 ] CLEAR
  gameArea.clear();

  // [ 4 ] DRAW
  // cassie.draw(); // Relocation: moved to renderer
  renderer.render();
  inv.draw();
  shotKeeper.draw();
  //framesPerSecond(); // Just a display //BUG1 - Displaying bullets for now
  // TODO: Reset timeStamp(?) Not sure if possible

  // Keep requesting further iterations of 'gameLoop' to animate game
  // TODO: Reset timeStamp(?)
  window.requestAnimationFrame(gameLoop);
}

function framesPerSecond() { // Displays fps on canvas
//   // Extra: Display FPS on canvas                  
  ctx.fillStyle = "rgba(0, 0, 0, 0)";
  ctx.fillRect(0, 0, 200, 100);
  ctx.font = '15px Arial';
  ctx.fillStyle = 'white';
  // ctx.fillText("Bullets: " +  shots.length);
  ctx.fillText("fps: " + fps, canvas.width - 50, canvas.height - 10);
  // ctx.fillText("playerBH: " + playerBH, canvas.width - 150, canvas.height - 50);
}

function intersect(object1, object2) { // Checks if two boxes intersect
  if (object2.x > object1.x + object1.width   || 
      object1.x > object2.x + object2.width   || 
      object2.y > object1.y + object1.height  || 
      object1.y > object2.y + object2.height) {

      return false;
  }

  return true;
}

// Abstract object 

function gamePart(width = 50, height = 70, color = "blue", x = 0, y = 0, velocity = 1, magnitude = 1, collided = false) {
  this.width  = width;
  this.height = height;
  this.color  = color;
  // Object position in the (x, y) plane
  this.x = x;
  this.y = y;
  this.velocity  = velocity;
  this.magnitude = magnitude;

  // Set collision boolean
  this.collided = collided;

  this.setup = function() { // Stub

  }

  this.update = function() { // Stub

  }

  // RELOCATE <- won't be needed here later
  this.draw = function() { // Redraw according to new positioning  
    ctx.fillStyle = color;
    ctx.globalAlpha = 0.7; // Opacity
    ctx.fillRect(this.x, this.y, this.width, this.height);
  }
}

function invaderToken(width, height, color, x, y, velocity, magnitude = 1, fireRate =  1 /*BUG1 fireRate*/, collided = false) { //BULL1
  // invaderToken inherits from more generic gamePart class
  gamePart.call(this, width, height, color, x, y, velocity, magnitude, collided);
  this.prototype = Object.create(gamePart.prototype);
  Object.defineProperty(this, 'constructor', { 
      value: invaderToken, 
      enumerable: false, // So that it does not appear in 'for in' loop
      writable: true 
  });  

  var cooldown = 0; // Time to wait until next shot is available
  var shotChance = 1; // % (chance of shot per movement)

  this.shoot = function () {
      cooldown += secondsPassed;

      if(cooldown > fireRate) {
        cooldown = 0;

        // laChance is French for luck
        // let laChance = Math.floor(Math.random()*101);
        // if(laChance < shotChance) { //@BULL1
          // this.y + height + 1 to ensure bullet doesn't kill origin point              
          shotKeeper.addShot(5, 10, /*color*/ "orange", this.x + width/2, 
                             this.y + height + 1, 1, 15 /*BUG1 VBS magnitude 125*/);
        }
      // }
  }
}

function invaders(invaderCount = 1, {invaderWidth = 10, invaderHeight = 10}, gapSpace = 20, velocity = 1, frameRate = 250) {
  this.invadarr = { // 2d invader array
    // a: {}, // Associative array, doesn't work with lengths and such
    a: [],
    f: [], // Invaders in the frontline (those allowed to shoot) 
    r: 0, // total rows
    totRows: function() {
      this.r;
    },

    totCols: function(rowIndex) { // Total number of columns for given row
      if(rowIndex < this.r) {
        return this.a[rowIndex].length;
      }
      else {
        return false; // Out of bounds
      }
    },

    addRows: function(numOf) { // Add specific number of rows
      for(let i = 0; i < numOf; i ++) {
        this.a[this.r ++] = [];
      }
    },

    clear: function() {
      this.a = []; // Reset array content
      this.r = 0; // No rows on empty array
    },

    setup: function() {
      // Set up frontline invaders
      this.f = []; // erase previous values
      // let frontliners = this.a[this.r - 1];
      this.f = this.a[this.r - 1]; // Reset frontline to frontmost array

      // for(let i = 0; i < frontliners.length; i ++) {
      //   this.f.push(frontliners[i]);
      // }
    }
  };

  this.invaderCount = invaderCount;
  // invadarr.c = invaderCount; // Number of invaders per row (read: columns)
  var vw = invaderWidth;
  var vh = invaderHeight;

  var b = gapSpace; // Space [ b ]etween each invader
  this.velocity = velocity;
  var frameUpper = frameRate;

  var frameNum = 0; // Marks the current frame you're on
  var vLeftmost, vRightmost;
  // var moveRight = true;
  let magnitude = 1;

  var wait = false; // 'turns' (frameRate) invaders must wait before moving again

  this.setup = function() {
    if(!invadersMem) {
      this.invadarr.clear(); // Make sure invader array is clear (sanity check mostly)
      // invadarr.a = [];
    }

    frameNum = 0; // Start waiting time from 0

    // SETUP AND SPACING
    // Relative space between each invader
    // X Coordinate of next invader (accounting for previous width)
    let next = vw + b;
    // Space between left most & rightmost invaders and the canvas boundary
    let edgeSpace = (canvas.width - invaderCount*vw - b*(invaderCount - 1))/2;
    //let step = edgeSpace/5; // Arbitrary (get to evenly go to edge)
    let drawAt = edgeSpace; // Where to start invaders so group of them is centered
    let y = 0; // y positioning (increments of 50 at the moment)

    // EACH INDIVIDUAL INVADER
    if(!invadersMem) {
      this.invadarr.addRows(2); // two rows
      // Populate with invaderCount number of invaders
      for(let i = 0; i < invaderCount; ++ i) {
        //BACK2
        this.invadarr.a[0].push(new invaderToken(/*width:*/ vw, /*height:*/ vh, /*color:*/"green", /*x:*/ drawAt, /*y:*/ 0, /*velocity:*/ 0 /*, fireRate: 3, collided: false*/));

        // Another row in front of previous row (y + 50)
        this.invadarr.a[1].push(new invaderToken(/*width:*/ vw, /*height:*/ vh, /*color:*/ "green", /*x:*/ drawAt, /*y:*/ 50, /*velocity:*/ 1 /*, fireRate: 3, collided: false*/));

        drawAt += next;
      }
      invadersMem = true;
    }
    else { // Recycle invader array if it already existed
      this.invadarr.a.forEach(function(row) {
        row.forEach(function(invader) {
          // Reset positioning and other pertinent values
          invader.x = drawAt;
          invader.y = y;
          drawAt += next;
          invader.collided = false; // All invaders intact
          invader.cooldown = 0; // Reset shot cooldown time
        });
        drawAt = edgeSpace;
        y += 50; // Y axis space for next row of invaders
      });
    }
    this.invadarr.setup(); // Set frontliners array again

    // SPEED AND DIRECTION
    velocity = 1;
    magnitude = 1;
    wait = false;
    // Reference for invaders on both ends of array
    vLeftmost = this.invadarr.a[0][0];
    vRightmost = this.invadarr.a[0][this.invadarr.a[0].length - 1];
    vRightmost.magnitude = 10; /*BUG1: magnitude = 30 */ // TODO: Replace vRightmost.magnitude with just an ordinary instance of magnitude (individual invaders might not need a speedboost defined, so it's wasted on them)
  }

  this.update = function() { // Update positioning
    if (frameNum ++ >= frameUpper) {
      frameNum = 0; // Reset frame

      if(wait) { // move forward
        this.invadarr.a.forEach(function(row){
          row.forEach(function(invader) {
            invader.y += 10;
          });
        });

        wait = false;
      }
      else {
        let dist  = velocity * vRightmost.magnitude;
        let distR = vRightmost.x + dist;
        let distL = vLeftmost.x + dist;

        // Movement based on canvas boundary collisions
        if(distR + vRightmost.width > canvas.width) { 
          velocity *= -1; // Change directions for next iteration
          // Calculate distance needed to reach rightmost canvas edge
          let finalDist = canvas.width - (vRightmost.x + vRightmost.width);

          // Move all invaders distance needed for rightmost invader to reach
          // canvas edge (and then move opposite direction in the next instance)
          this.invadarr.a.forEach(function(row) {
            row.forEach(function(invader) {
              invader.x += finalDist;
            });
          });

          wait = true; // Make invaders wait at corner for two 'turns' (frameRate)
        }

        else if(distL < 0) { // would cross the left boundary    
          velocity *= -1;
          // move final distance to reach canvas' left boundary
          let finalDist = 0 - vLeftmost.x;

          this.invadarr.a.forEach(function(row) {
            row.forEach(function(invader) {
              invader.x += finalDist;
            });
          });

          wait = true;
        }
        else this.invadarr.a.forEach(function(row){ // Advance like normal
          row.forEach(function(invader){
            invader.x += dist;
          });
        });
      }
    }
  }

  // RELOCATION (Marked for later)
  this.draw = function() {
    this.invadarr.a.forEach(function(row) {
      row.forEach(function(invader) {
        if(!invader.collided) { // Dead invaders not drawn
          invader.draw();
        }
      });
    });
  }

  this.shoot = function() {
    if(!wait) {
      this.invadarr.f.forEach(function(frontliner) { // Frontmost invaders will shoot
        if(!frontliner.collided) {
            frontliner.shoot();
        }
      });
    }
  }
}

// Optional: With inheritance, can add new properties at the end of 'magnitude'
function playerToken(width, height, color, x, y, velocity = 1, magnitude = 1000, /* BULL1 -> magnitude = 125*/ fireRate = .25) {
  // playerToken inherits from more generic gamePart class
  gamePart.call(this, width, height, color, x, y, velocity, magnitude);
  this.prototype = Object.create(gamePart.prototype);
  Object.defineProperty(this, 'constructor', {
      value: playerToken, 
      enumerable: false, // so that it does not appear in 'for in' loop
      writable: true 
  });

  this.velocity = velocity;
  this.magnitude = magnitude;
  var cooldown = 0;

  this.setup = function() { // RELOCATION: Moving setup to renderer
    // Set up player token's positioning (bottom-center)
    // Subtracting(read: displacing) by player token dimensions to accomodate 
    // for token's size 
    cassie.x = canvas.width/2 - cassie.width/2;
    cassie.y = canvas.height  - cassie.height;
  }

  this.update = function(secondsPassed) {
    // Variables tell what arrow keys are being pressed
    // canvas = document.getElementById("game-canvas");
    let right = activeKeys[ArrowRight];
    let left = activeKeys[ArrowLeft];

    // Player token direction based on arrow keys
    if (left && !right) {
      holding = 'left';
      this.velocity = -1;
    }
    if(!left && right) {
      holding = 'right';
      this.velocity = 1;
    }
    if(left && right) { // Special case: player holds both arrows
      if(holding == 'right') { // Was holding right first
        this.velocity = -1; // Most recent is left, so go left
      }
      if(holding == 'left') { // Was holding left first
        this.velocity = 1; // Most recent is right, so go right
      }
      if(holding == '') { // Edge case, pressed both at exact time, choose one
        holding = 'right';
        this.velocity = -1; 
      }
    }
    if(!right && !left) {
      holding = ''; // Reset, player is not holding either
      this.velocity = 0;
    }

    // (velocity = distance/time_passed) * const * time_passed = distance
    let dist = this.x + this.velocity * this.magnitude * secondsPassed;

    if(dist == 0) { // No movement

    }
    else if(dist < 0) { // Boundary
      this.x = 0;
    }
    else if(dist + this.width == canvas.width) { // Boundary
    }
    else if(dist + this.width > canvas.width) { // Boundary
      this.x = canvas.width - this.width; 
    }
    else { // Move
      this.x = dist;
    }
  }

  // Relocation
  // this.draw = function() { // Redraw according to new positioning   
  //   // ctx.fillStyle = color;
  //   // ctx.globalAlpha = 0.7; // Opacity
  //   ctx.drawImage(imgRepo.player_token, this.x, this.y, this.width, this.height);
  // }

  this.draw = function() { // Relocation (WiP -> will be entirely rendered in the renderer without having to be called here, maybe)
    renderer.render();
  }

  this.shoot = function() {
    let space = activeKeys[Space]; // Press Enter to shoot
    cooldown += secondsPassed;
    if (space && cooldown > fireRate) { // Attempt at limiting bullets / sec
      cooldown = 0;
      // (x,y) displacement accomodates for token's dimensions
      // Negative velocity because player's bullets go up
      shotKeeper.addShot(5, 10, "yellow", this.x + width/2, this.y - height/2, 
                         -1, 500 /* TEST2 magnitude -> 125*/);
    }
  }
}

// Is there a better way to define an object with properties? Because this 
// function will not be used as a data type or anything
function shotKeeper() { // Object in charge of keeping tabs on all bullets
  // Note: might reset bullet array upon game ending (at least until efficient 
  // way of storing and re-using them is possibly found)
  var shots = [];

  this.setup = function() { // Run1 on game start
    shots = []; // Resets bullet array
  }

  // TODO: Is there a way to reference gamePart for this?? They essentially take
  // the same parameters
  this.addShot = function(width = 5, height = 15, color = "blue", x = 70, y = 70,
                          velocity = 1, magnitude = 500, collided = false) {
    this.width = width;
    this.height = height;
    this.color = color;
    this.x = x;
    this.y = y;
    this.velocity = velocity;
    this.magnitude = magnitude;
    this.collided = collided;
   
    shots.push(new gamePart(this.width, this.height, this.color, this.x, this.y, 
                            this.velocity, this.magnitude, this.collided));
  }

  // Redefine clear/draw to render all the bullets. Probably though can use the
  // same kind of approach as invaders, defining a 'move' property. If so, then
  // I can DRY out the methods' code into a single function, and use said 
  // function in each object class!! <- may be unable to due to how certain
  // things move, and movement is simply adding/subtracting x and y. The draws
  // are already DRYed out
  this.update = function() {
    //TODO: Add collision check, remove if collision
    // Delete individual shot if it leaves canvas (cleanup)
    // Movement
    shots.forEach(function(shot) {
      if(shot.y > canvas.height || shot.y < 0) {
        shots.splice(shot, 1); 
      }
      else { // advance
        shot.y += shot.velocity * shot.magnitude * secondsPassed;
      }
    });
  }

  this.collisionCheck = function(token) {
    // STANDBY3: Only pay attention to front row for now
    // let thisVader = invadarr.a[1][index]; // get value of invader in question

    shots.forEach(function(shot) {
      let collides = intersect(shot, token); // Way to fix this (?)
      if (collides) {
        shot.collided = true;
        // Bullet and invader cancel each other
        // T0D0 ################################################################
        // [Bullet => Invader intact?]
        // if(!token.collided) { 
        // if(!inv._getCollided(index)) {
        if(!token.collided) {
          shots.splice(shot, 1); // Intact token disappears along with bullet
          // [Bullet => collision]
          // invadarr.a[1][index].collided = true;
          token.collided = true;
        }
      }
    });
  }

  this.draw = function() {
    // Extra: displays number of bullets on the window/screen   
    document.getElementById("bull").innerHTML = "bullets: " + shots.length;
    shots.forEach(function(shot) {
      shot.draw();
    });
  }
}
</script>
<noscript>Error: Please download JavaScript for your browser.</noscript>

<!-- ----------------------------------------------------------------------- -->
                               <!-- Page body -->

<!-- Canvas CSS (keep here for now for ease of editing) -->
<style>
  /*Include to hide HTML element by default*/
  .hidden {
    /*display: none; */  /* CVIS Make canvas visible at all times*/
  }

  #play-button {
    /*Needs absolute positioning to work even inside the canvas*/
    position: absolute;
  }

  html, body {
    /*Give page dimensions so canvas can encompass entirety of page*/
    width:  100%;
    height: 100%;
    margin: 0;
    overflow: hidden;
  }

  #game-canvas {
    /*Temporary border*/
    border: 2px solid #38e3c4;
    position: absolute;
    z-index: 0;
    /*z-index: 1;*/
    /*TODO: Make good scaling*/
    /*width: 100%;
    height: 100%;*/
    top: 0px;
    left: 0px;
    background: transparent;
  }
</style>